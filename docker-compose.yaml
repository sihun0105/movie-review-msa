version: '3.7'

services:
  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
      args:
        - APP=rabbitmq
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'

  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
      args:
        - APP=mysql
    container_name: mysql
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    networks:
      - app-network
    restart: 'no'

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=api-gateway
    container_name: api-gateway
    ports:
      - 3030:3030
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    restart: 'no'
    depends_on:
      - mysql

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=auth
    container_name: auth-service
    ports:
      - 50051:50051
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/auth/src/main.js

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=user
    container_name: user-service
    ports:
      - 50052:50052
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/user/src/main.js

  reply-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=reply
    container_name: reply-service
    ports:
      - 50053:50053
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/reply/src/main.js
  movie-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=movie
    container_name: movie-service
    ports:
      - 50054:50054
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/movie/src/main.js
  cron-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=cron
    container_name: cron-service
    ports:
      - 3001:3001
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/cron/src/main.js
  match-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP=match
    container_name: match-service
    ports:
      - 50059:50059
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    networks:
      - app-network
    depends_on:
      - mysql
      - api-gateway
    restart: 'no'
    command:
      - bash
      - -c
      - |
        ./wait-for-it.sh mysql:3306 -s -t 100
        node dist/apps/match/src/main.js
networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
