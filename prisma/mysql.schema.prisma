generator client {
  provider = "prisma-client-js"
  output   = "./generated/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        Int       @id @default(autoincrement())
  movieId   Int
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @db.DateTime(6)
  deletedAt DateTime? @db.DateTime(6)
  userno    Int
  comment   String?   @db.LongText
  Movie     Movie     @relation(fields: [movieId], references: [movieCd], onDelete: NoAction, onUpdate: NoAction)
  User      User      @relation(fields: [userno], references: [id], onDelete: Cascade)

  @@index([movieId], map: "movieId_idx")
  @@index([userno], map: "user_no_idx")
}

model Movie {
  id            Int          @id @default(autoincrement())
  audience      BigInt?
  movieCd       Int          @unique
  title         String?      @db.LongText
  rank          BigInt?
  createdAt     DateTime     @default(now()) @db.DateTime(6)
  updatedAt     DateTime     @default(now()) @db.DateTime(6)
  poster        String?      @db.VarChar(1024)
  vector        Json?
  rankInten     String?      @db.VarChar(10)
  plot          String?      @db.LongText
  rankOldAndNew String?      @db.VarChar(10)
  openDt        DateTime?    @db.DateTime(6)
  genre         String?      @db.VarChar(100)
  director      String?      @db.VarChar(100)
  ratting       String?      @db.VarChar(100)
  Comment       Comment[]
  MovieVod      MovieVod[]
  movieScores   movieScore[]

  @@index([movieCd], map: "movieId")
}

model User {
  id                                 Int                @id @default(autoincrement())
  email                              String             @unique(map: "uni_User_email")
  nickname                           String?            @db.LongText
  password                           String?            @db.LongText
  createdAt                          DateTime           @default(now()) @db.DateTime(6)
  updatedAt                          DateTime           @default(now()) @db.DateTime(6)
  deletedAt                          DateTime?          @db.DateTime(6)
  provider                           String             @default("credentials") @db.VarChar(45)
  image                              String?            @db.LongText
  Comment                            Comment[]
  Matches_Matches_owner_idToUser     Matches[]          @relation("Matches_owner_idToUser")
  Matches_Matches_requester_idToUser Matches[]          @relation("Matches_requester_idToUser")
  Recruit                            Recruit[]
  RecruitComment                     RecruitComment[]
  article                            article[]
  articleComments                    articleComments[]
  articleLikes                       articleLikes[]
  channelchats                       channelchats[]
  channelmembers                     channelmembers[]
  movieScores                        movieScore[]
  workspace                          workspace[]
  workspacemembers                   workspacemembers[]
}

model channelchats {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @db.DateTime(6)
  UserId    Int?
  ChannelId Int?
  channels  channels? @relation(fields: [ChannelId], references: [id], map: "FK_channelchats_channles")
  User      User?     @relation(fields: [UserId], references: [id], map: "FK_channelchats_user")

  @@index([UserId], map: "FK_8494e7d49237c46d648fbab8cf4_idx")
  @@index([ChannelId], map: "FK_8494e7d49237c46d648fbab8cf4_idx1")
}

model channelmembers {
  ChannelId Int
  UserId    Int
  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @default(now()) @db.DateTime(6)
  User      User     @relation(fields: [UserId], references: [id], onDelete: Cascade, map: "FK_channelmembers_user")

  @@id([UserId, ChannelId])
}

model channels {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(30)
  private      Boolean?       @default(false)
  createdAt    DateTime       @default(now()) @db.DateTime(6)
  updatedAt    DateTime       @default(now()) @db.DateTime(6)
  WorkspaceId  Int?
  channelchats channelchats[]
  workspace    workspace?     @relation(fields: [WorkspaceId], references: [id], map: "FK_channels_workspaces")

  @@index([WorkspaceId], map: "FK_channels_workspaces_idx")
}

model workspace {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(30)
  url       String     @db.VarChar(30)
  createdAt DateTime   @default(now()) @db.DateTime(6)
  updatedAt DateTime   @default(now()) @db.DateTime(6)
  deletedAt DateTime?  @db.DateTime(6)
  OwnerId   Int?
  channels  channels[]
  User      User?      @relation(fields: [OwnerId], references: [id], map: "FK_workspace_user")

  @@index([OwnerId], map: "FK_workspace_user_idx")
}

model workspacemembers {
  WorkspaceId Int
  UserId      Int
  createdAt   DateTime  @default(now()) @db.DateTime(6)
  updatedAt   DateTime  @default(now()) @db.DateTime(6)
  loggedInAt  DateTime? @db.DateTime(0)
  User        User      @relation(fields: [UserId], references: [id], onDelete: Cascade, map: "FK_workspacemembers_user")

  @@id([UserId, WorkspaceId])
}

model movieScore {
  id        Int       @id @default(autoincrement())
  movieCd   Int
  score     Float?
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @db.DateTime(6)
  deletedAt DateTime? @db.DateTime(6)
  Userno    Int
  User      User      @relation(fields: [Userno], references: [id], onDelete: Cascade)
  Movie     Movie     @relation(fields: [movieCd], references: [movieCd], onDelete: Cascade)

  @@unique([movieCd, Userno], map: "movieCd_userno_unique")
  @@index([movieCd], map: "movieId_idx")
  @@index([Userno], map: "movieScore_Userno_fkey")
}

model MovieVod {
  id        Int       @id @default(autoincrement())
  vodUrl    String    @db.VarChar(1024)
  movieCd   Int
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @db.DateTime(6)
  deletedAt DateTime? @db.DateTime(6)
  Movie     Movie     @relation(fields: [movieCd], references: [movieCd], onDelete: Cascade)

  @@index([movieCd], map: "MovieVod_movieCd_fkey_idx")
}

model Recruit {
  id             Int              @id @default(autoincrement())
  userno         Int
  title          String           @db.VarChar(256)
  content        String           @db.VarChar(1024)
  screening_date DateTime?        @db.DateTime(6)
  location       String?          @db.VarChar(255)
  status         Recruit_status   @default(open)
  createdAt      DateTime         @default(now()) @db.DateTime(6)
  updatedAt      DateTime         @default(now()) @db.DateTime(6)
  deletedAt      DateTime?        @db.DateTime(6)
  theater_name   String?          @map("theater name") @db.VarChar(45)
  Matches        Matches[]
  User           User             @relation(fields: [userno], references: [id], onDelete: Cascade)
  RecruitComment RecruitComment[]

  @@index([userno], map: "Recruit_userno_fkey_idx")
}

model RecruitComment {
  id         Int       @id @default(autoincrement())
  recruit_id Int
  userno     Int
  content    String    @db.VarChar(256)
  createdAt  DateTime  @default(now()) @db.DateTime(6)
  updatedAt  DateTime  @default(now()) @db.DateTime(6)
  deletedAt  DateTime? @db.DateTime(6)
  Recruit    Recruit   @relation(fields: [recruit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RecruitComment_recruitno_fkey")
  User       User      @relation(fields: [userno], references: [id], onDelete: Cascade)

  @@index([recruit_id], map: "RecruitComment_recruitno_fkey_idx")
  @@index([userno], map: "RecruitComment_userno_fkey_idx")
}

model Matches {
  id                              Int            @id @default(autoincrement())
  recruit_id                      Int?
  requester_id                    Int
  owner_id                        Int
  acceptedAt                      DateTime?      @db.DateTime(6)
  createdAt                       DateTime       @db.DateTime(6)
  updatedAt                       DateTime       @db.DateTime(6)
  deletedAt                       String?        @db.VarChar(45)
  status                          Matches_status @default(pending)
  User_Matches_owner_idToUser     User           @relation("Matches_owner_idToUser", fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Matches_owner_fkey")
  Recruit                         Recruit?       @relation(fields: [recruit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Matches_recruitid_fkey")
  User_Matches_requester_idToUser User           @relation("Matches_requester_idToUser", fields: [requester_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Matches_requester_fkey")

  @@index([owner_id], map: "Matches_owner_fkey_idx")
  @@index([recruit_id], map: "Matches_recruitid_fkey_idx")
  @@index([requester_id], map: "Matches_requester_fkey_idx")
}

model article {
  id              Int               @id @default(autoincrement())
  userno          Int
  title           String            @db.VarChar(255)
  content         String            @db.Text
  like_count      Int               @default(0)
  dislike_count   Int               @default(0)
  comment_count   Int               @default(0)
  createdAt       DateTime          @default(now()) @db.DateTime(6)
  updatedAt       DateTime          @default(now()) @db.DateTime(6)
  deletedAt       DateTime?         @db.DateTime(6)
  User            User              @relation(fields: [userno], references: [id], onDelete: Cascade, map: "Article_userno_fkey")
  articleComments articleComments[]
  articleLikes    articleLikes[]

  @@index([userno], map: "Article_userno_fkey_idx")
}

model articleComments {
  id        Int       @id @default(autoincrement())
  articleId Int
  userno    Int
  content   String    @db.Text
  createdAt DateTime  @default(now()) @db.DateTime(6)
  updatedAt DateTime  @default(now()) @db.DateTime(6)
  deletedAt DateTime? @db.DateTime(6)
  article   article   @relation(fields: [articleId], references: [id], onDelete: Cascade, map: "ArticleComments_articleId_fkey")
  User      User      @relation(fields: [userno], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ArticleComments_userno_fkey")

  @@index([articleId], map: "ArticleComments_articleId_fkey_idx")
  @@index([userno], map: "ArticleComments_userno_fkey_idx")
}

model articleLikes {
  id         Int               @id @default(autoincrement())
  article_id Int
  userno     Int
  type       articleLikes_type
  createdAt  DateTime          @default(now()) @db.DateTime(6)
  updatedAt  DateTime          @default(now()) @db.DateTime(6)
  article    article           @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "ArticleLike_articleId_fkey")
  User       User              @relation(fields: [userno], references: [id], onDelete: Cascade, map: "ArticleLike_userno_fkey")

  @@unique([article_id, userno, type], map: "unique_like")
  @@index([article_id], map: "ArticleLike_articleId_fkey_idx")
  @@index([userno], map: "ArticleLike_userno_fkey_idx")
}

enum Recruit_status {
  open
  matched
  closed
}

enum Matches_status {
  pending
  confirmed
  cancelled
}

enum articleLikes_type {
  like
  dislike
}
